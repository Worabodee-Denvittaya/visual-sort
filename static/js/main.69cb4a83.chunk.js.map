{"version":3,"sources":["components/Toolbar.jsx","components/ArrayInput.jsx","components/SortButton.jsx","components/Result.jsx","components/Body.jsx","App.js","serviceWorker.js","index.js"],"names":["Toolbar","handleSpeedChange","event","props","setSpeed","target","value","state","algo","toggle","array","handleClick","bind","selectColor","this","setState","setAlgo","thisAlgo","id","disabled","sorting","type","min","max","onChange","className","onClick","Component","ArrayInput","handleChange","stringArray","lastChar","charAt","length","includes","numberArray","split","map","Number","setInitialArray","which","toggleHidden","isNotSorting","isNotSorted","toNumber","sorted","placeholder","onKeyUp","SortButton","getMinIndex","i","order","mergeMemo","newMemo","newMerging","merging","j","push","toString","join","isSubSet","master","sub","masterString","x","String","every","val","indexOf","orderIndex","newArray","reOrder","reOrdered","visited","Set","clear","stringSub","has","size","ordered","k","l","add","showMergeResult","sortedArr","previous","upperBefore","upperAfter","lower","upperBeforeMemo","upperAfterMemo","lowerMemo","initialArray","upperResults","before","after","merge","space","upper","splice","lowerResults","empty","row","values","indeces","isInteger","setMergeResult","count","timerID","setInterval","isSorted","clearInterval","speed","leftArr","rightArr","thisMergeMemo","slice","shift","mergesort","arr","midpoint","Math","round","partition","low","high","temp","pivot","memo","concat","quickSort","pi","bubbleSort","thisArray","first","setBubbleResult","showResults","bubbling","showQuickSortResult","upperMemo","iPosition","jPosition","iPos","jPos","lowerPivot","setQuickSortResult","result","isSorting","Result","style","margin","padding","backgroundColor","fontSize","borderStyle","borderWidth","width","purple","element","key","bubbleArray","Body","setResults","arrays","thisResults","results","appSorting","appNotSorting","App","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69cb4a83.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Toolbar.css\";\n\nclass Toolbar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      algo: \"\",\n      toggle: \"\",\n      array: []\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.selectColor = this.selectColor.bind(this);\n  }\n\n  handleClick(algo) {\n    this.setState({ algo: algo });\n    this.props.setAlgo(algo);\n  }\n\n  selectColor(thisAlgo) {\n    if (thisAlgo === this.state.algo) {\n      return \"active\";\n    }\n    return \"inactive\";\n  }\n\n  handleSpeedChange = event => {\n    this.props.setSpeed(event.target.value);\n  };\n\n  render() {\n    return (\n      <div>\n        <ul id=\"toolbar\" disabled={this.props.sorting}>\n          <div id=\"fast\">slow</div>\n          <input\n            id=\"changeSpeed\"\n            type=\"range\"\n            min=\"1\"\n            max=\"10\"\n            value=\"5.5\"\n            disabled={this.props.sorting}\n            onChange={this.handleSpeedChange}\n          />\n          <div id=\"slow\">fast</div>\n          <li className=\"algo\">\n            <div\n              className={this.selectColor(\"bubble\")}\n              onClick={() => this.handleClick(\"bubble\")}\n            >\n              Bubble Sort\n            </div>\n          </li>\n          <li className=\"algo\">\n            <div\n              className={this.selectColor(\"quick\")}\n              onClick={() => this.handleClick(\"quick\")}\n            >\n              Quick Sort\n            </div>\n          </li>\n          <li className=\"algo\">\n            <div\n              className={this.selectColor(\"merge\")}\n              onClick={() => this.handleClick(\"merge\")}\n            >\n              Merge Sort\n            </div>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Toolbar;\n","import React, { Component } from \"react\";\nimport \"./ArrayInput.css\";\n\nclass ArrayInput extends Component {\n  constructor() {\n    super();\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  toNumber(stringArray) {\n    const numbers = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n    const lastChar = stringArray.charAt(stringArray.length - 1);\n\n    if (numbers.includes(lastChar)) {\n      const numberArray = stringArray.split(\",\").map(Number);\n      this.props.setInitialArray(numberArray);\n    } else {\n      return;\n    }\n  }\n\n  handleChange(event) {\n    if (event.which === 13) {\n      this.toggleHidden();\n    } else {\n      this.props.isNotSorting();\n      this.props.isNotSorted();\n      const stringArray = event.target.value;\n      this.toNumber(stringArray);\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className=\"dropdown-content\"\n        id=\"myDropdown\"\n        disabled={!this.props.sorted}\n      >\n        <input\n          type=\"text\"\n          placeholder=\"e.g: 1, 2, 3, 4\"\n          onKeyUp={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ArrayInput;\n","import React, { Component } from \"react\";\nimport \"./SortButton.css\";\n\nclass SortButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      array: [],\n      memo: [],\n      result: [],\n      mergeMemo: [],\n      pivot: 0\n    };\n  }\n\n  getMinIndex = array => {\n    let min = array[0][0];\n    for (let i = 1; i < array.length; i++) {\n      if (array[i][0] < min) min = array[i][0];\n    }\n    return min;\n  };\n\n  order = mergeMemo => {\n    const newMemo = [];\n    let newMerging = [];\n\n    for (let i = 0; i < mergeMemo.length; i++) {\n      let merging = mergeMemo[i];\n      let min = this.getMinIndex(merging);\n      newMerging = [];\n\n      for (let j = 0; j < merging.length; j++) {\n        newMerging.push([min, merging[j][1]]);\n        min++;\n      }\n      newMemo.push(newMerging);\n    }\n    return newMemo;\n  };\n\n  toString = array => {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i].length === 2) array[i] = array[i].join(\",\");\n    }\n    array = array.join(\";\");\n    return array;\n  };\n\n  isSubSet = (master, sub) => {\n    let masterString = master.map(x => String(x));\n    let subString = sub.map(x => String(x));\n\n    const b = subString.every(val => masterString.indexOf(val) >= 0);\n    return b;\n  };\n\n  orderIndex = array => {\n    let min = this.getMinIndex(array);\n    const newArray = [];\n\n    for (let i = 0; i < array.length; i++) {\n      newArray.push([min, array[i][1]]);\n      min++;\n    }\n    return newArray;\n  };\n\n  reOrder = mergeMemo => {\n    let array = [],\n      sub = [],\n      reOrdered = [];\n\n    let visited = new Set();\n    visited.clear();\n\n    for (let i = 0; i < mergeMemo.length; i++) {\n      array = [...mergeMemo[i]];\n\n      for (let j = 0; j <= i; j++) {\n        if (i !== j) {\n          sub = [...mergeMemo[j]];\n          let stringSub = this.toString([...sub]);\n\n          if (\n            this.isSubSet([...array], [...sub]) &&\n            (visited.has(stringSub) === false || visited.size === 0)\n          ) {\n            let ordered = this.orderIndex(sub);\n            for (let k = 0; k < array.length; k++) {\n              for (let l = 0; l < sub.length; l++) {\n                if (array[k] === sub[l]) array[k] = ordered[l];\n              }\n            }\n\n            visited.add(stringSub);\n          }\n        }\n      }\n      reOrdered.push(array);\n    }\n\n    return reOrdered;\n  };\n\n  showMergeResult = (mergeMemo, sortedArr) => {\n    const reOrdered = this.reOrder(mergeMemo);\n    mergeMemo = this.order(mergeMemo);\n\n    let previous = [];\n    let upperBefore = [];\n    let upperAfter = [];\n    let lower = [];\n    let upperBeforeMemo = [];\n    let upperAfterMemo = [];\n    let lowerMemo = [];\n\n    //for each entry in the memo\n    for (let i = 0; i < mergeMemo.length; i++) {\n      const merging = mergeMemo[i];\n      lower = sortedArr.map(x => \"\");\n\n      if (i === 0) upperBefore = [...this.props.initialArray];\n      else upperBefore = [...previous];\n      for (let j = 0; j < merging.length; j++) {\n        upperBefore[merging[j][0]] = \"\";\n        lower[merging[j][0]] = merging[j][1];\n      }\n\n      lowerMemo.push(lower);\n      upperBeforeMemo.push(upperBefore);\n\n      upperAfter = [];\n      for (let j = 0; j < sortedArr.length; j++) {\n        if (upperBefore[j] === \"\") {\n          upperAfter.push(lower[j]);\n        } else {\n          upperAfter.push(upperBefore[j]);\n        }\n      }\n\n      previous = [...upperAfter];\n      upperAfterMemo.push(upperAfter);\n    }\n\n    const upperResults = [];\n    let before = [],\n      after = [],\n      merge = [],\n      space = [];\n\n    for (let i = 0; i < upperBeforeMemo.length; i++) {\n      if (i === 0) {\n        before = [...upperBeforeMemo[i]];\n        after = [...this.props.initialArray];\n        merge = [...reOrdered[i]];\n        space = [];\n      } else {\n        before = [...upperBeforeMemo[i]];\n        after = [...upperAfterMemo[i - 1]];\n        merge = [...reOrdered[i]];\n        space = [];\n      }\n      //find out which index is spaced out\n      for (let j = 0; j < before.length; j++) {\n        if (before[j] === \"\") space.push(j);\n      }\n\n      for (let j = 0; j < merge.length; j++) {\n        let upper = [...after];\n        for (let k = 0; k <= j; k++) {\n          upper.splice(merge[k][0], 1, \"\");\n        }\n        upperResults.push(upper);\n      }\n      upperResults.push(upperAfterMemo[i]);\n    }\n    const lowerResults = [];\n    let empty = [];\n\n    for (let i = 0; i < lowerMemo.length; i++) {\n      empty = [];\n      const row = [...lowerMemo[i]];\n      const values = [],\n        indeces = [];\n      let lower = [];\n\n      for (let j = 0; j < row.length; j++) {\n        empty.push(\"\");\n      }\n\n      for (let j = 0; j < row.length; j++) {\n        if (Number.isInteger(row[j])) {\n          values.push(row[j]);\n          indeces.push(j);\n        }\n      }\n\n      for (let j = 0; j < values.length; j++) {\n        lower = [...empty];\n        for (let k = 0; k <= j; k++) {\n          lower.splice(indeces[k], 1, values[k]);\n        }\n        lowerResults.push(lower);\n      }\n      lowerResults.push(empty);\n    }\n\n    this.props.setMergeResult(this.props.initialArray, empty);\n\n    let count = 0;\n    let timerID = setInterval(() => {\n      if (count < upperResults.length) {\n        this.props.setMergeResult(upperResults[count], lowerResults[count]);\n        count++;\n      } else {\n        this.props.isSorted();\n        clearInterval(timerID);\n      }\n    }, this.props.speed);\n  };\n\n  merge = (leftArr, rightArr) => {\n    let thisMergeMemo = this.state.mergeMemo;\n    let sortedArr = [];\n\n    while (leftArr.length && rightArr.length) {\n      if (leftArr[0][1] <= rightArr[0][1]) {\n        sortedArr.push(leftArr[0]);\n        leftArr = leftArr.slice(1);\n      } else {\n        sortedArr.push(rightArr[0]);\n        rightArr = rightArr.slice(1);\n      }\n    }\n\n    while (leftArr.length) {\n      sortedArr.push(leftArr.shift());\n    }\n\n    while (rightArr.length) {\n      sortedArr.push(rightArr.shift());\n    }\n\n    thisMergeMemo.push(sortedArr.slice(0));\n    this.setState({ mergeMemo: thisMergeMemo });\n    return sortedArr;\n  };\n\n  mergesort = arr => {\n    if (arr.length < 2) {\n      return arr;\n    } else {\n      var midpoint = Math.round(arr.length / 2);\n\n      var leftArr = arr.slice(0, midpoint);\n      var rightArr = arr.slice(midpoint, arr.length);\n\n      return this.merge(this.mergesort(leftArr), this.mergesort(rightArr));\n    }\n  };\n\n  partition = (arr, low, high) => {\n    const newMemo = this.state.memo;\n\n    let i, j, temp, pivot;\n    pivot = arr[high];\n    i = low - 1; // index of smaller element\n    for (j = low; j < high; j++) {\n      // If current element is smaller than the pivot\n      if (arr[j] < pivot) {\n        i++;\n        newMemo.push([i, j].concat(arr.slice(0), high));\n        // swap arr[i] and arr[j]\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n\n        this.setState({ memo: newMemo });\n      }\n    }\n\n    // swap arr[i+1] and arr[high] (or pivot)\n    newMemo.push([i + 1, j].concat(arr.slice(0), high));\n    temp = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = temp;\n\n    return i + 1;\n  };\n\n  /* The main function that implements QuickSort() \n      arr[] --> Array to be sorted, \n      low  --> Starting index, \n      high  --> Ending index */\n  quickSort = (arr, low, high) => {\n    let pi;\n    const newMemo = this.state.memo;\n\n    if (low < high) {\n      /* pi is partitioning index, arr[pi] is  \n              now at right place */\n      pi = this.partition(arr, low, high);\n\n      this.setState({ memo: newMemo });\n\n      // Recursively sort elements before partition and after partition\n      this.quickSort(arr, low, pi - 1);\n      this.quickSort(arr, pi + 1, high);\n    }\n  };\n\n  bubbleSort = () => {\n    const thisArray = this.props.initialArray;\n    const length = thisArray.length;\n    let i, j, temp;\n    let first = true;\n\n    const newMemo = this.state.memo;\n\n    for (i = 0; i < length - 1; i++) {\n      for (j = 0; j < length - i - 1; j++) {\n        if (thisArray[j] > thisArray[j + 1]) {\n          if (first === true) {\n            newMemo.push([j].concat(thisArray.slice(0)));\n            this.setState({ memo: newMemo });\n\n            temp = thisArray[j];\n            thisArray[j] = thisArray[j + 1];\n            thisArray[j + 1] = temp;\n\n            newMemo.push([j + 1].concat(thisArray.slice(0)));\n            this.setState({ memo: newMemo });\n\n            first = false;\n          } else {\n            temp = thisArray[j];\n            thisArray[j] = thisArray[j + 1];\n            thisArray[j + 1] = temp;\n            newMemo.push([j + 1].concat(thisArray.slice(0)));\n            this.setState({ memo: newMemo });\n          }\n        } else first = true;\n      }\n    }\n    if (this.state.memo.length === 0) {\n      this.props.isSorted();\n      this.props.setBubbleResult(thisArray, 0);\n    } else {\n      this.showResults(this.state.memo);\n    }\n  };\n\n  showResults = memo => {\n    let array = memo[0];\n    let bubbling = array[0];\n    array = array.slice(1);\n    this.props.setBubbleResult(array, bubbling);\n\n    let i = 1;\n    let timerID = setInterval(() => {\n      if (i < memo.length) {\n        array = memo[i];\n        bubbling = array[0];\n        array = array.slice(1);\n        this.props.setBubbleResult(array, bubbling);\n        i++;\n      } else {\n        this.props.isSorted();\n        clearInterval(timerID);\n      }\n    }, this.props.speed);\n    this.setState({ memo: [] });\n  };\n\n  showQuickSortResult = memo => {\n    let upperMemo = [],\n      lowerMemo = [];\n\n    for (let i = 0; i < memo.length; i++) {\n      let array = memo[i];\n      let iPosition = array[0];\n      let jPosition = array[1];\n      let lower = [],\n        empty = [];\n      array = array.slice(2);\n\n      if (jPosition === array[array.length - 1]) lower.push(jPosition);\n      else lower.push(\"\");\n\n      for (let j = 0; j < array.length - 1; j++) {\n        lower.push(\"\");\n        empty.push(\"\");\n      }\n\n      lowerMemo.push([...lower]);\n\n      lower.splice(jPosition + 1, 1, array[jPosition]);\n      lower.splice(iPosition + 1, 1, array[iPosition]);\n      lowerMemo.push([...lower]);\n\n      lower.splice(iPosition + 1, 1, array[jPosition]);\n      lower.splice(jPosition + 1, 1, array[iPosition]);\n      if (Number.isInteger(lower[0])) lower.splice(0, 1, iPosition);\n      lowerMemo.push([...lower]);\n\n      upperMemo.push([...array]);\n      array.splice(iPosition, 1, \"\");\n      array.splice(jPosition, 1, \"\");\n      upperMemo.push([...array]);\n      upperMemo.push([...array]);\n\n      if (Number.isInteger(lower[0])) {\n        lowerMemo.push([\"\"].concat(empty));\n        array = [...memo[i]].slice(2);\n        let iPos = array[iPosition];\n        let jPos = array[jPosition];\n        array.splice(jPosition, 1, iPos);\n        array.splice(iPosition, 1, jPos);\n        array.splice(array.length - 1, 1, iPosition);\n        upperMemo.push([...array]);\n      }\n    }\n\n    let upper = [...upperMemo[0]];\n    let lower = [...lowerMemo[0]];\n    let pivot = upper[upper.length - 1];\n    let lowerPivot = lower[0];\n    upper.splice(upper.length - 1, 1);\n    this.props.setQuickSortResult(upper, lower.slice(1), pivot, lowerPivot);\n\n    let i = 1;\n    let timerID = setInterval(() => {\n      if (i < upperMemo.length) {\n        let upper = [...upperMemo[i]];\n        let lower = [...lowerMemo[i]];\n        let lowerPivot = lower[0];\n        lower.splice(0, 1);\n        let pivot = upper[upper.length - 1];\n\n        upper.splice(upper.length - 1, 1);\n\n        this.props.setQuickSortResult(upper, lower, pivot, lowerPivot);\n        i++;\n      } else {\n        this.props.isSorted();\n        clearInterval(timerID);\n      }\n    }, this.props.speed);\n    this.setState({ memo: [] });\n  };\n\n  render() {\n    return (\n      <div\n        id=\"sort-button\"\n        disabled={this.props.sorting}\n        onClick={() => {\n          switch (this.props.algo) {\n            case \"bubble\":\n              this.props.isSorting();\n              this.props.isNotSorted();\n              this.bubbleSort();\n              break;\n            case \"merge\":\n              this.setState({ mergeMemo: [] }, () => {\n                this.props.isNotSorted();\n                this.props.isSorting();\n                let array = [];\n                for (let i = 0; i < this.props.initialArray.length; i++) {\n                  array[i] = [i, this.props.initialArray[i]];\n                }\n                this.showMergeResult(\n                  this.state.mergeMemo,\n                  this.mergesort(array, 0, 0)\n                );\n              });\n              break;\n            case \"quick\":\n              this.setState({ memo: [] });\n              this.props.isSorting();\n              this.props.isNotSorted();\n              this.quickSort(\n                this.props.initialArray,\n                0,\n                this.props.initialArray.length - 1\n              );\n              this.showQuickSortResult(this.state.memo);\n              break;\n            default:\n              this.bubbleSort();\n              break;\n          }\n        }}\n      >\n        Sort\n      </div>\n    );\n  }\n}\n\nexport default SortButton;\n","import React from \"react\";\nimport \"./Array.css\";\n\nconst Result = props => {\n  const style = {\n    margin: 0,\n    padding: 0,\n    backgroundColor: \"#8BCCFE\",\n    fontSize: \"45px\",\n    borderStyle: \"solid\",\n    borderWidth: \"5px\",\n    width: \"100%\"\n  };\n\n  const sorted = {\n    margin: 0,\n    padding: 0,\n    backgroundColor: \"#82F57F\",\n    fontSize: \"45px\",\n    borderStyle: \"solid\",\n    borderWidth: \"5px\",\n    width: \"100%\"\n  };\n\n  const purple = {\n    margin: 0,\n    padding: 0,\n    backgroundColor: \"#C338FE\",\n    fontSize: \"45px\",\n    borderStyle: \"solid\",\n    borderWidth: \"5px\",\n    width: \"100%\"\n  };\n\n  if (!props.sorting) {\n    return (\n      <ul id=\"array\">\n        {props.initialArray.map((element, key) => (\n          <li className=\"element\" key={key}>\n            <div style={style}>{element}</div>\n          </li>\n        ))}\n      </ul>\n    );\n  } else if (props.algo === \"bubble\") {\n    if (props.sorted === false) {\n      return (\n        <ul id=\"array\">\n          {props.bubbleArray.map((element, key) => (\n            <li className=\"element\" key={key}>\n              <div style={key === props.bubbling ? purple : style}>\n                {element}\n              </div>\n            </li>\n          ))}\n        </ul>\n      );\n    } else {\n      return (\n        <ul id=\"array\">\n          {props.bubbleArray.map((element, key) => (\n            <li className=\"element\" key={key}>\n              <div style={sorted}>{element}</div>\n            </li>\n          ))}\n        </ul>\n      );\n    }\n  } else if (props.algo === \"merge\") {\n    const upper = props.upper;\n    const lower = props.lower;\n\n    return (\n      <div>\n        <ul id=\"array\">\n          {upper.map((element, key) => (\n            <li className=\"element\" key={key}>\n              <div style={props.sorted ? sorted : style}>\n                {Number.isInteger(element) ? element : \" \"}\n              </div>\n            </li>\n          ))}\n        </ul>\n        <ul id=\"array\">\n          {lower.map((element, key) => (\n            <li className=\"element\" key={key}>\n              <div style={props.sorted ? sorted : style}>\n                {Number.isInteger(element) ? element : \" \"}\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  } else if (props.algo === \"quick\") {\n    if (props.sorted === false) {\n      return (\n        <div>\n          <ul id=\"array\">\n            {props.upper.map((element, key) => (\n              <li className=\"element\" key={key}>\n                <div style={key === props.pivot ? purple : style}>\n                  {Number.isInteger(element) ? element : \" \"}\n                </div>\n              </li>\n            ))}\n          </ul>\n          <ul id=\"array\">\n            {props.lower.map((element, key) => (\n              <li className=\"element\" key={key}>\n                <div style={key === props.lowerPivot ? purple : style}>\n                  {Number.isInteger(element) ? element : \" \"}\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      );\n    } else {\n      return (\n        <ul id=\"array\">\n          {props.upper.map((element, key) => (\n            <li className=\"element\" key={key}>\n              <div style={sorted}>{element}</div>\n            </li>\n          ))}\n        </ul>\n      );\n    }\n  }\n};\n\nexport default Result;\n","import React, { Component } from \"react\";\nimport ArrayInput from \"./ArrayInput\";\nimport SortButton from \"./SortButton\";\nimport Result from \"./Result\";\n\nclass Body extends Component {\n  constructor() {\n    super();\n    this.state = {\n      initialArray: [],\n      bubbleArray: [],\n      upper: [],\n      lower: [],\n      results: [],\n      memo: [],\n      pivot: 0,\n      lowerPivot: 0,\n      bubbling: 0,\n      sorting: false,\n      sorted: true\n    };\n  }\n\n  setInitialArray = array => {\n    this.setState({ initialArray: array });\n  };\n\n  setBubbleResult = (array, bubbling) => {\n    this.setState({ bubbleArray: array });\n    this.setState({ bubbling: bubbling });\n  };\n\n  setQuickSortResult = (upper, lower, pivot, lowerPivot) => {\n    this.setState({ upper: upper });\n    this.setState({ lower: lower });\n    this.setState({ pivot: pivot });\n    this.setState({ lowerPivot: lowerPivot });\n  };\n\n  setMergeResult = (upper, lower) => {\n    this.setState({ upper: upper });\n    this.setState({ lower: lower });\n  };\n\n  setResults = arrays => {\n    const thisResults = this.state.results;\n    thisResults.push(arrays.slice(0));\n    this.setState({ results: thisResults });\n  };\n\n  isSorting = () => {\n    this.setState({ sorting: true });\n    this.props.appSorting();\n  };\n\n  isNotSorting = () => {\n    this.setState({ sorting: false });\n    this.props.appNotSorting();\n  };\n\n  isSorted = () => {\n    this.setState({ sorted: true });\n  };\n\n  isNotSorted = () => {\n    this.setState({ sorted: false });\n  };\n\n  render() {\n    return (\n      <div id=\"body\">\n        <ArrayInput\n          setInitialArray={this.setInitialArray}\n          isNotSorting={this.isNotSorting}\n          isNotSorted={this.isNotSorted}\n          sorted={this.state.sorted}\n        />\n        <Result\n          initialArray={this.state.initialArray}\n          pivot={this.state.pivot}\n          lowerPivot={this.state.lowerPivot}\n          iPosition={this.state.iPosition}\n          jPosition={this.state.jPosition}\n          bubbling={this.state.bubbling}\n          bubbleArray={this.state.bubbleArray}\n          upper={this.state.upper}\n          lower={this.state.lower}\n          sorting={this.state.sorting}\n          sorted={this.state.sorted}\n          algo={this.props.algo}\n        />\n        <SortButton\n          algo={this.props.algo}\n          setResults={this.setResults}\n          isSorting={this.isSorting}\n          isNotSorting={this.isNotSorting}\n          isSorted={this.isSorted}\n          isNotSorted={this.isNotSorted}\n          setQuickSortResult={this.setQuickSortResult}\n          setBubbleResult={this.setBubbleResult}\n          setMergeResult={this.setMergeResult}\n          initialArray={this.state.initialArray}\n          showResults={this.showResults}\n          sorting={this.state.sorting}\n          speed={this.props.speed}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Body;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./components/Toolbar.css\";\nimport Toolbar from \"./components/Toolbar\";\nimport Body from \"./components/Body\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      algo: \"\",\n      speed: 800,\n      sorting: false\n    };\n    this.setAlgo = this.setAlgo.bind(this);\n  }\n\n  setAlgo(algo) {\n    this.setState({ algo: algo });\n  }\n\n  appSorting = () => {\n    this.setState({ sorting: true });\n  };\n\n  appNotSorting = () => {\n    this.setState({ sorting: false });\n  };\n\n  setSpeed = value => {\n    let speed = parseInt(1500 - 140 * value);\n    this.setState({ speed: speed });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Toolbar\n          setAlgo={this.setAlgo}\n          sorting={this.state.sorting}\n          setSpeed={this.setSpeed}\n        />\n        <Body\n          algo={this.state.algo}\n          appSorting={this.appSorting}\n          appNotSorting={this.appNotSorting}\n          speed={this.state.speed}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}